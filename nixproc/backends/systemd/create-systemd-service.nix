{ writeTextFile
, stdenv
, lib
, createCredentials
, basePackages

# Specifies whether user changing functionality should be disabled or not
, forceDisableUserChange ? false
# Prefix that is in front of all systemd units generated by this function
, prefix ? "nix-process-"
}:

{
# A name that identifies the process instance
name
# An attribute set specifying arbitrary environment variables
, environment ? {}
, unitType ? "service"
# List of supervisord services that this configuration depends on.
# These properties are translated to Wants= and After= properties to ensure
# proper activation ordering and that the dependencies are started first
, dependencies ? []
# Specifies which packages need to be in the PATH
, path ? []
# Specifies which groups and users that need to be created.
, credentials ? {}
# Arbitrary commands executed after generating the configuration files
, postInstall ? ""
# The remainder of the parameters directly get translated to sections and properties
# See: https://www.freedesktop.org/software/systemd/man/systemd.unit.html
# and: https://www.freedesktop.org/software/systemd/man/systemd.service.html
, ...
}@args:

let
  util = import ../util {
    inherit lib;
  };

  sections = removeAttrs args [ "unitType" "name" "environment" "dependencies" "path" "credentials" "postInstall" ];

  _environment = util.appendPathToEnvironment {
    inherit environment;
    path = basePackages ++ path;
  };

  generateEnvironmentVariables = environment:
    lib.concatMapStrings (name:
      let
        value = builtins.getAttr name _environment;
      in
      ''Environment=${name}=${toString value}
      ''
    ) (builtins.attrNames _environment);

  mapDependencies = dependencies:
    if dependencies == [] then ""
    else
    ''
      Wants=${toString (map (dependency: "${dependency.name}.${dependency.unitType}") dependencies)}
      After=${toString (map (dependency: "${dependency.name}.${dependency.unitType}") dependencies)}
    '';

  generateSection = {title, properties}:
  ''

    [${title}]
    ${lib.concatMapStrings (name:
      let
        value = builtins.getAttr name properties;
      in
      if forceDisableUserChange && (name == "User" || name == "Group") then "" else # Don't change user privileges when we force it to be disabled
      ''${if builtins.isList value then lib.strings.concatMapStringsSep "\n" (x: "${name}=${toString x}") value else "${name}=${toString value}"}
      ''
    ) (builtins.attrNames properties)}''
  + (if title == "Service" then generateEnvironmentVariables _environment else "")
  + (if title == "Unit" then mapDependencies dependencies else "");

  generateSections = sections:
    lib.concatMapStrings (title:
      let
        properties = builtins.getAttr title sections;
      in
      generateSection {
        inherit title properties;
      }
   ) (builtins.attrNames sections);

  systemdFile = writeTextFile {
    name = "${name}.${unitType}";
    text = ''
      ${generateSections sections}
      ${lib.optionalString (!(sections ? Service) && _environment != {} && unitType == "service") ''
        [Service]

        ${generateEnvironmentVariables _environment}''}
      ${lib.optionalString (!(sections ? Unit) && dependencies != []) ''

        [Unit]
        ${mapDependencies dependencies}
      ''}
    '';
  };

  credentialsSpec = createCredentials credentials;
in
stdenv.mkDerivation {
  name = "${prefix}${name}";

  inherit unitType;

  buildCommand = ''
    mkdir -p $out/etc/systemd/system
    ln -s ${systemdFile} $out/etc/systemd/system/${prefix}${name}.${unitType}

    ${lib.optionalString (dependencies != []) ''
      mkdir -p $out/etc/systemd/system/${prefix}${name}.${unitType}.wants

      ${lib.concatMapStrings (dependency: ''
        ln -s ${dependency}/etc/systemd/system/${dependency.name}.${dependency.unitType} $out/etc/systemd/system/${prefix}${name}.${unitType}.wants
      '') dependencies}
    ''}

    ln -s ${credentialsSpec}/dysnomia-support $out/dysnomia-support

    ${postInstall}
  '';
}
